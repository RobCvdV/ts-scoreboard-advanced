import React, { Component } from 'react';import Scoreboard from "./Scoreboard";import { connect } from 'react-redux';import { IRootState } from "../reducers";import { IPlayersState } from '../entities/player';import * as playersActions from "../actions/players";import * as settingsActions from '../actions/scoreboardSettings';import { IScoreboardSettings } from "../entities/scoreboardSettings";import { PlayersActions, ScoreboardSettingsActions } from "../actions";import { bindActionCreators, Dispatch } from "redux";// we can nest redux-state props, so it stays a bit more tidytype TStateProps = {    settings: IScoreboardSettings,    players: IPlayersState,}// using bindActionCreators we can later create a mapDispatch(ToProps) with nested actions,// that are wrapped in the dispatch call for easy usetype TDispatchProps = {    playersActions: PlayersActions,    settingsActions: ScoreboardSettingsActions}type TProps =    TStateProps    & TDispatchProps;class ScoreboardContainer extends Component<TProps> {    private resetPlayerScores = () => {        const { playerList } = this.props.players;        const { setPlayerScore} = this.props.playersActions        playerList.forEach(player => setPlayerScore({            playerId: player.id!,            amount: 0        }))    }    render() {        const {playerList} = this.props.players;        const {isAddingRandomScores} = this.props.settings;        const {addPlayerScore, deletePlayer, addPlayerWithName, deleteAllPlayers, setPlayerName} = this.props.playersActions;        const {toggleIsAddingRandomScores} = this.props.settingsActions;        return (            <Scoreboard                players={playerList}                isRandomizing={isAddingRandomScores}                addPlayerScore={(id:number, add: number) => {addPlayerScore({playerId:id,amount: add})}}                deletePlayer={deletePlayer}                addPlayer={addPlayerWithName}                toggleRandomAddHandler={toggleIsAddingRandomScores}                resetPlayerScores={this.resetPlayerScores}                clearBoard={deleteAllPlayers}                setPlayerName={(id, name) => {setPlayerName({playerId:id, name})}}            />        )    }}const mapStateToProps = (state: IRootState): TStateProps => ({    settings: state.scoreboardSettings,    players: state.players,});// some type checking will be missing from the component I think// And I would prefer having actions not spread over the root props, but not a big issueconst mapDispatchToProps = (dispatch: Dispatch): TDispatchProps => {    return {        playersActions: bindActionCreators(playersActions, dispatch),        settingsActions: bindActionCreators(settingsActions, dispatch)    }}export default connect(mapStateToProps, mapDispatchToProps)(ScoreboardContainer);