import React, { Component } from 'react';import Scoreboard from "./Scoreboard";import { connect } from 'react-redux';import { IRootState } from "../reducers";import { IPlayersState } from '../entities/player';import * as playersActions from "../actions/players";import * as settingsActions from '../actions/scoreboardSettings';import { IScoreboardSettings } from "../entities/scoreboardSettings";type TStateProps = {    settings: IScoreboardSettings,    players: IPlayersState,}// using dispatch and putting actions in a elevated prop e.g. playerActions and settingsActions// seems to be hard on the connect redux function.type TDispatchProps = {    addPlayerWithName: typeof playersActions.addPlayerWithName,    addPlayerScore: typeof playersActions.addPlayerScore,    setPlayerScore: typeof playersActions.setPlayerScore,    deletePlayer: typeof playersActions.deletePlayer,    toggleIsAddingRandomScores: typeof settingsActions.toggleIsAddingRandomScores,    setSelectedPlayerId: typeof settingsActions.setSelectedPlayerId,}type TProps =    TStateProps    & TDispatchProps;class ScoreboardContainer extends Component<TProps> {    private resetPlayerScores = () => {        const { playerList } = this.props.players;        playerList.forEach(player => this.props.setPlayerScore({            playerId: player.id!,            amount: 0        }))    }    private clearBoard = () => {        // scores are adding, don't wipe now        if (this.props.settings.isAddingRandomScores)            return        const playerList = [...this.props.players.playerList];        playerList.forEach(player => this.props.deletePlayer(player.id));    }    render() {        const {playerList} = this.props.players;        const {isAddingRandomScores} = this.props.settings;        return (            <Scoreboard                players={playerList}                isRandomizing={isAddingRandomScores}                addPlayerScore={(id:number, add: number) => {this.props.addPlayerScore({playerId:id,amount: add})}}                deletePlayer={this.props.deletePlayer}                addPlayer={this.props.addPlayerWithName}                toggleRandomAddHandler={this.props.toggleIsAddingRandomScores}                resetPlayerScores={this.resetPlayerScores}                clearBoard={this.clearBoard}            />        )    }}const mapStateToProps = (state: IRootState): TStateProps => ({    settings: state.scoreboardSettings,    players: state.players,});// soe type checking will be missing from the component I think// And I would prefer having actions not spread over the root props, but not a big issueconst mapDispatchToProps: TDispatchProps = {    ...playersActions,    ...settingsActions}export default connect(mapStateToProps, mapDispatchToProps)(ScoreboardContainer);